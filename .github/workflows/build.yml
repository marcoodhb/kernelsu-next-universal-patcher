name: Build a kernel with KernelSU patched and SuSFS
on:
    workflow_dispatch:
        # Various inputs to simplify usage of workflow.
        inputs:
            KSU_GIT:
                description: 'Link to the git repository of the KernelSU variant (leave it be for KernelSU-Next or if unsure):'
                required: false
                default: 'https://github.com/KernelSU-Next/KernelSU-Next.git'
            KSU_GIT_BRANCH:
                description: 'Preferred branch of the preferred KernelSU git repository (leave it be for KernelSU-Next, otherwise must define):'
                required: false
                default: 'next'
            INCLUDE_SUSFS:
                type: choice
                description: 'Would you like to build the kernel with SuSFS (leave it be if unsure)?'
                required: false
                default: 'No'
                options:
                    - 'Yes'
                    - 'No'
            KERNEL_GIT:
                description: 'Link to the git repository of your preferred kernel source:'
                required: true
            KERNEL_GIT_BRANCH:
                description: 'Preferred branch of the kernel source git repository:'
                required: true
            KERNEL_ARCH:
                type: choice
                description: 'Kernel architecture (seperate from Android architecture):'
                required: true
                options:
                    - 'arm64'
                    - 'arm'
            KERNEL_COMPILER:
                type: choice
                description: 'Which compiler would you like to use?'
                required: true
                options:
                    - 'Clang/LLVM'
                    - 'GCC/Binutils'
            KERNEL_CONFIGS:
                description: 'Space-seperated list of kernel configs your designated device requires by order (!IMPORTANT AND DANGEROUS!):'
                required: true
            KERNEL_LOCALVERSION:
                description: 'Suffix for your kernel version (must not contain spaces, leave blank if unsure):'
                required: false
            #KERNEL_EXTRA_CONFIGS:
            #    description: 'Extra kernel configuration lines (!USE AT YOUR OWN RISK!, leave blank if unsure, please):'
            #    required: false

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
           fetch-depth: 0

        - name: 'Setup dependencies and environment'
          run: |
            sudo cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources~
            sudo sed -Ei 's/^Types: deb$/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources
            sudo apt-get update -y

            # Install kernel build dependencies
            sudo apt build-dep -y linux

            # Install clang and LLVM
            LATEST_LLVM_TOOLCHAIN=$(curl -sSf https://api.github.com/repos/llvm/llvm-project/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep -wi "Linux-X64.tar.xz"$)
            wget $LATEST_LLVM_TOOLCHAIN -O ./LLVM-latest-Linux-X64.tar.xz
            tar --wildcards -xvpf ./LLVM-latest-Linux-X64.tar.xz --warning=no-file-changed --ignore-failed-read || true
            rm -rf *.tar.xz

            # Install GCC for aarch64 and arm(32)
            wget https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
            for file in *.tar.xz; do tar --wildcards -xvpf $file --warning=no-file-changed --ignore-failed-read || true; done
            rm -rf *.tar.xz

            # Compile and install coccinelle
            sudo apt-get build-dep -y coccinelle
            git clone --depth=1 https://github.com/coccinelle/coccinelle.git
            cd ./coccinelle/
            ./autogen
            ./configure
            make -j$(nproc --all)
            sudo make -j$(nproc --all) install

        - name: 'Clone kernel source'
          run: |
            git clone --depth=1 ${{ github.event.inputs.KERNEL_GIT }} -b ${{ github.event.inputs.KERNEL_GIT_BRANCH }} ./kernel-src

        - name: 'Clone any submodules if present'
          working-directory: './kernel-src'
          run: |
            git submodule init; git submodule update

        - name: 'Patch KernelSU repository into the kernel source'
          working-directory: './kernel-src'
          run: |
            # Revert any old KernelSU patches
            [ -L "drivers/kernelsu" ] && rm "drivers/kernelsu" && echo "[-] Symlink removed."
            grep -q "kernelsu" "./drivers/Makefile" && sed -i '/kernelsu/d' "./drivers/Makefile" && echo "[-] Makefile reverted."
            grep -q "drivers/kernelsu/Kconfig" "./drivers/Kconfig" && sed -i '/drivers\/kernelsu\/Kconfig/d' "./drivers/Kconfig" && echo "[-] Kconfig reverted."
            if [ -d "./KernelSU*" ]; then
                rm -rf "./KernelSU*" && echo "[-] KernelSU directory deleted."
            fi

            # Clone the KernelSU repository
            git submodule add --force -b ${{ github.event.inputs.KSU_GIT_BRANCH }} ${{ github.event.inputs.KSU_GIT }} ./KernelSU

            # Apply KernelSU patches
            ln -sf ../KernelSU/kernel ./drivers/kernelsu
            grep -q "kernelsu" "./drivers/Makefile" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> "./drivers/Makefile" && echo "[+] Modified Makefile."
            grep -q "source \"drivers/kernelsu/Kconfig\"" "./drivers/Kconfig" || sed -i "/endmenu/i\source \"drivers/kernelsu/Kconfig\"" "./drivers/Kconfig" && echo "[+] Modified Kconfig."
            echo '[+] Done.'

        - name: 'Patch KernelSU manual scope-minimized hooks into the kernel source'
          working-directory: './kernel-src'
          run: |
            # Clone the repository which contains the patch
            git clone --depth=1 https://github.com/devnoname120/kernelsu-coccinelle.git

            # Patch the kernel source with scope-minimized hooks
            for p in fs drivers/input drivers/tty arch/arm/kernel; do spatch --sp-file ./kernelsu-coccinelle/scope-minimized-hooks/kernelsu-scope-minimized.cocci --in-place --linux-spacing "$p"; done

            # Cleanup
            rm -rf ./kernelsu-coccinelle

        - name: 'Generate the kernel .config file'
          working-directory: './kernel-src'
          run: |
            # Generate kernel config using make
            if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'Clang/LLVM' ]; then
                make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/LLVM-*-Linux-X64/bin)/clang LLVM=$(realpath ~/**/LLVM-*-Linux-X64/bin)/ LLVM_IAS=1 LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
            fi

            if [ ${{ github.event.inputs.KERNEL_ARCH }} == 'arm' ]; then
                if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'GCC/Binutils' ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                fi
            else
                if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'GCC/Binutils' ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                fi
            fi

            echo 'CONFIG_KSU_KPROBES_HOOK=n' >> out/.config

        - name: 'Build kernel'
          working-directory: './kernel-src'
          run: |
            # Compile using make
            if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'Clang/LLVM' ]; then
                make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/LLVM-*-Linux-X64/bin)/clang LLVM=$(realpath ~/**/LLVM-*-Linux-X64/bin)/ LLVM_IAS=1 LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out
            fi

            if [ ${{ github.event.inputs.KERNEL_ARCH }} == 'arm' ]; then
                if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'GCC/Binutils' ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out
                fi
            else
                if [ ${{ github.event.inputs.KERNEL_COMPILER }} == 'GCC/Binutils' ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- LOCALVERSION=${{ github.event.inputs.KERNEL_LOCALVERSION }} -j$(nproc --all) O=out
                fi
            fi
